{"version":3,"sources":["components/DistometerInput/DistometerInput.jsx","components/DistometerTableHeader/DistometerTableHeader.jsx","components/DistometerTableItem/DistometerTableItem.jsx","components/DistometerTableData/DistometerTableData.jsx","DistometerModel.js","components/Distometer/Distometer.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["DistometerInput","props","value","onHandleSubmit","useState","form","setForm","React","useEffect","onInputChange","event","target","name","prev","className","onSubmit","preventDefault","htmlFor","type","date","id","readOnly","required","onChange","distance","step","min","DistometerTableHeader","data","map","item","nanoid","defaultProps","DistometerTableItem","onDeleteItem","onEditItem","Number","toFixed","moment","format","onClick","DistometerTableData","DistometerModel","this","DEFAULT_FORM_VALUE","Distometer","setData","sortData","sort","a","b","Fragment","index","findIndex","model","copy","slice","toString","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7fa312f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function DistometerInput(props) {\r\n  const { value, onHandleSubmit } = props;\r\n  const [form, setForm] = useState(value);\r\n\r\n  React.useEffect(() => {\r\n    setForm(value);\r\n  }, [value]);\r\n\r\n  const onSubmit = (event) => {\r\n    event.preventDefault();\r\n    onHandleSubmit(form);\r\n  }\r\n\r\n  const onInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setForm((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <form className=\"form\" onSubmit={onSubmit}>\r\n      <div className=\"form__input__container\">\r\n        <label htmlFor=\"date\">Дата (ДД.ММ.ГГ)</label>\r\n        <input className=\"form__input\" type=\"date\" value={form.date} name=\"date\"\r\n          id=\"date\" readOnly={form.id ? \"readonly\" : null} required onChange={onInputChange} />\r\n      </div>\r\n      <div className=\"form__input__container\">\r\n        <label htmlFor=\"distance\">Пройдено (км)</label>\r\n        <input className=\"form__input\" type=\"number\" value={form.distance} name=\"distance\"\r\n          id=\"distance\" step=\"0.001\" min=\"0.001\" required onChange={onInputChange} />\r\n      </div>\r\n      <button className=\"form__button\">OK</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nDistometerInput.propTypes = {\r\n  value: PropTypes.object.isRequired,\r\n  onHandleSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { nanoid } from 'nanoid';\r\n\r\nexport default function DistometerTableHeader(props) {\r\n  const { value } = props;\r\n  \r\n  const data = value.map((item) => <div className=\"table__column\" key={nanoid()}>{item}</div>);\r\n\r\n  return (\r\n    <div className=\"table__header\">\r\n      {data}\r\n    </div>\r\n  );\r\n}\r\n\r\nDistometerTableHeader.defaultProps = {\r\n  value: [\r\n    'Дата (ДД.ММ.ГГ)',\r\n    'Пройдено (км)',\r\n    'Действия',\r\n  ],\r\n};\r\n\r\nDistometerTableHeader.propTypes = {\r\n  value: PropTypes.array,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport moment from 'moment';\r\n\r\nexport default function DistometerTableItem(props) {\r\n  const { item, onDeleteItem, onEditItem } = props;\r\n  item.distance = Number(item.distance).toFixed(3);\r\n\r\n  return (\r\n    <div className=\"table__row\">\r\n      <span className=\"table__column\">{moment(`${item.date}`).format('DD.MM.YYYY')}</span>\r\n      <span className=\"table__column\">{item.distance}</span>\r\n      <div className=\"table__column action__icons_wrapper\">\r\n        <i className=\"material-icons action__icon\" onClick={() => onEditItem(item)}>edit</i>\r\n        <i className=\"material-icons action__icon\" onClick={() => onDeleteItem(item.id)}>close</i>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nDistometerTableItem.propTypes = {\r\n  item: PropTypes.shape({\r\n    id: PropTypes.string.isRequired,\r\n    date: PropTypes.string.isRequired,\r\n    distance: PropTypes.string.isRequired,\r\n  }),\r\n  onDeleteItem: PropTypes.func.isRequired,\r\n  onEditItem: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport DistometerTableItem from '../DistometerTableItem/DistometerTableItem';\r\n\r\nexport default function DistometerTableData(props) {\r\n  const { data, onDeleteItem, onEditItem } = props;\r\n\r\n  return (\r\n    <div className=\"table__body\">\r\n      {data.map((value) => <DistometerTableItem key={value.id} item={value}\r\n        onDeleteItem={() => onDeleteItem(value.id)}\r\n        onEditItem={() => onEditItem(value)}\r\n      />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nDistometerTableData.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  onDeleteItem: PropTypes.func.isRequired,\r\n  onEditItem: PropTypes.func.isRequired,\r\n};\r\n","export default class DistometerModel {\r\n  constructor(id, date, distance) {\r\n    this.id = id;\r\n    this.date = date;\r\n    this.distance = distance;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport DistometerInput from '../DistometerInput/DistometerInput';\r\nimport DistometerTableHeader from '../DistometerTableHeader/DistometerTableHeader';\r\nimport DistometerTableData from '../DistometerTableData/DistometerTableData';\r\nimport DistometerModel from '../../DistometerModel';\r\nimport { nanoid } from 'nanoid';\r\n\r\nconst DEFAULT_FORM_VALUE = {\r\n  id: '',\r\n  date: '',\r\n  distance: '',\r\n};\r\n\r\nexport default function Distometer() {\r\n  const [data, setData] = useState([]);\r\n  const [form, setForm] = useState(DEFAULT_FORM_VALUE);\r\n\r\n  const sortData = data.sort((a, b) => b.date > a.date ? 1 : -1);\r\n\r\n  const handleSubmit = (event) => {\r\n    const index = data.findIndex((value) => value.date === event.date);\r\n    if (index === -1) {\r\n      const model = new DistometerModel(nanoid(), event.date, event.distance);\r\n      setData((prev) => [...prev, model]);\r\n      setForm({ id: '', date: '', distance: '' });\r\n      return;\r\n    }\r\n    const copy = data.slice();\r\n    if (event.id) {\r\n      copy[index].distance = event.distance;\r\n      setForm({ id: '', date: event.date, distance: event.distance });\r\n    } else copy[index].distance = (+copy[index].distance + +event.distance).toString();\r\n    setData(copy);\r\n  }\r\n\r\n  const handleDeleteItem = (event) => {\r\n    setData((prev) => prev.filter((value) => value.id !== event));\r\n    setForm((prev) => ({ ...prev, id: '' }));\r\n  }\r\n\r\n  const handleEditItem = (event) => setForm({ id: event.id, date: event.date, distance: event.distance });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <DistometerInput value={form} onHandleSubmit={handleSubmit} />\r\n      <DistometerTableHeader />\r\n      <DistometerTableData data={sortData} onDeleteItem={handleDeleteItem} onEditItem={handleEditItem} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Distometer from './components/Distometer/Distometer';\n\nfunction App() {\n\n  return (\n    <div className=\"component__wrapper\">\n      <Distometer />\n    </div>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}